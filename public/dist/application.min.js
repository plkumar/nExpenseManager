"use strict";function DistributionWidgetController($scope,Entries){function buildEntiesData(data){var data_by_category={};angular.forEach(data,function(value,key){"income"!==value.entry_type&&("undefined"==typeof data_by_category[value.category]?data_by_category[value.category]={value:value.quantity}:data_by_category[value.category].value+=value.quantity)}),angular.forEach(data_by_category,function(value,key){"#"+Math.floor(16777215*Math.random()).toString(16);$scope.distribution_data.push({value:value.value,color:"rgba(151,187,205,0.5)",highlight:"rgba(151,187,205,1)",label:key})})}$scope.distribution_data=[],Entries.query(buildEntiesData),$scope.distribution_options={percentageInnerCutout:65,animateRotate:!0,animateScale:!1,responsive:!0}}function HistoryWidgetController($scope,Entries){$scope.entries=Entries.query()}function RatesWidgetController($scope){}function TimelineWidgetController($scope,Entries){$scope.timeline_data={labels:["January","February","March","April","May","June","July"],datasets:[{label:"My First dataset",fillColor:"rgba(220,220,220,0.2)",strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:[65,59,80,81,56,55,40]},{label:"My Second dataset",fillColor:"rgba(151,187,205,0.2)",strokeColor:"rgba(151,187,205,1)",pointColor:"rgba(151,187,205,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(151,187,205,1)",data:[28,48,40,19,86,27,90]}]},$scope.timeline_options={bezierCurve:!1,pointDotRadius:3,responsive:!0}}var ApplicationConfiguration=function(){var applicationModuleName="expense-manager",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),angular.module("core",["tc.chartjs"]),ApplicationConfiguration.registerModule("entries"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("widgets"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function(){return"/"}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","Widgets","$state",function($scope,Authentication,Widgets,$state){$scope.authentication=Authentication,$scope.area=Widgets.getArea("home"),$state.transitionTo("home.widgets")}]),angular.module("core").directive("CustomDp",function(){return{restrict:"E",replace:!0,templateUrl:"modules/core/views/datepicker.client.view.html"}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").service("Widgets",[function(){this.defaultRoles=["user"],this.areas={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateAreaExistance=function(areaId){if(areaId&&areaId.length){if(this.areas[areaId])return!0;throw new Error("Area does not exists")}throw new Error("AreaId was not provided")},this.validateWidgetExistance=function(areaId,widgetId){if(this.validateAreaExistance(areaId),widgetId&&widgetId.length){if(this.areas[areaId].widgets[widgetId])return!0;throw new Error("Widget does not exists")}throw new Error("WidgetId was not provided")},this.getArea=function(areaId){return this.validateAreaExistance(areaId),this.areas[areaId]},this.addArea=function(areaId,isPublic,roles){return this.areas[areaId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,widgets:{},shouldRender:shouldRender},this.areas[areaId]},this.removeArea=function(areaId){this.validateAreaExistance(areaId),delete this.areas[areaId]},this.addWidget=function(areaId,widgetId,widgetIndex,widgetController,widgetView,widgetClass,isPublic,roles){return this.validateAreaExistance(areaId),this.areas[areaId].widgets[widgetIndex]={id:widgetId,"class":widgetClass,view:widgetView,controller:widgetController,isPublic:isPublic||this.areas[areaId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender},this.areas[areaId]},this.removeWidget=function(areaId,widgetId){this.validateWidgetExistance(areaId,widgetId);for(var widgetIndex in this.areas[areaId].widget)this.areas[areaId].widget[widgetIndex].id===widgetId&&this.areas[areaId].widget.splice(widgetIndex,1);return this.areas[areaId]},this.addArea("home")}]),angular.module("entries").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Entries","entries","dropdown","/entries(/create)?"),Menus.addSubMenuItem("topbar","entries","List Entries","entries"),Menus.addSubMenuItem("topbar","entries","New Entry","entries/create")}]),angular.module("entries").config(["$stateProvider",function($stateProvider){$stateProvider.state("listEntries",{url:"/entries",templateUrl:"modules/entries/views/list-entries.client.view.html"}).state("createEntry",{url:"/entries/create",templateUrl:"modules/entries/views/create-entry.client.view.html"}).state("viewEntry",{url:"/entries/:entryId",templateUrl:"modules/entries/views/view-entry.client.view.html"}).state("editEntry",{url:"/entries/:entryId/edit",templateUrl:"modules/entries/views/edit-entry.client.view.html"})}]),angular.module("entries").controller("EntriesController",["$scope","$stateParams","$location","Authentication","Entries",function($scope,$stateParams,$location,Authentication,Entries){function initFields(){$scope.quantity=0,$scope.entry_type="expense",$scope.date=new Date}$scope.authentication=Authentication,$scope.categories=["Income","Home Loan","Personal Loan","Credit Cards","Food and drinks","Leisure","Health","Transport","Others"],initFields(),$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!$scope.opened&&!0},$scope.create=function(){var entry=new Entries({quantity:this.quantity,entry_type:this.entry_type,category:this.category,date:this.date,description:this.description});entry.$save(function(response){$location.path("entries")},function(errorResponse){$scope.error=errorResponse.data.message}),initFields()},$scope.remove=function(entry){if(entry){entry.$remove();for(var i in $scope.entries)$scope.entries[i]===entry&&$scope.entries.splice(i,1)}else $scope.entry.$remove(function(){$location.path("entries")})},$scope.update=function(){var entry=$scope.entry;entry.$update(function(){$location.path("entries")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.entries=Entries.query()},$scope.findOne=function(){$scope.entry=Entries.get({entryId:$stateParams.entryId})}}]),angular.module("entries").directive("itemColor",[function(){return{restrict:"A",link:function(scope,element,attrs){var color=attrs.itemColor;element.css("border-left-width","5px"),element.css("border-left-color",color),angular.forEach(element.find("h4"),function(value,key){value.className.indexOf("list-group-item-heading")<0||angular.element(value).css("color",color)})}}}]),angular.module("entries").factory("Entries",["$resource",function($resource){return $resource("entries/:entryId",{entryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/signin.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("widgets").run(["Widgets",function(Widgets){Widgets.addWidget("home","rates",0,RatesWidgetController,"rates","col-md-6"),Widgets.addWidget("home","history",1,HistoryWidgetController,"history","col-md-6"),Widgets.addWidget("home","distribution",2,DistributionWidgetController,"distribution","col-md-6"),Widgets.addWidget("home","timeline",3,TimelineWidgetController,"timeline","col-md-6")}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("home.widgets",{views:{history:{templateUrl:"modules/widgets/views/history-widget.client.view.html"},rates:{templateUrl:"modules/widgets/views/rates-widget.client.view.html"},distribution:{templateUrl:"modules/widgets/views/distribution-widget.client.view.html"},timeline:{templateUrl:"modules/widgets/views/timeline-widget.client.view.html"}}})}]),angular.module("widgets").controller("DistributionWidgetController",["$scope","Entries",DistributionWidgetController]),angular.module("widgets").controller("HistoryWidgetController",["$scope","Entries",HistoryWidgetController]),angular.module("widgets").controller("RatesWidgetController",["$scope","Entries",RatesWidgetController]),angular.module("widgets").controller("TimelineWidgetController",["$scope","Entries",TimelineWidgetController]),angular.module("widgets").controller("WidgetsController",["$scope","$stateParams","$location","Authentication","Widgets",function($scope,$stateParams,$location,Authentication,Widgets){$scope.authentication=Authentication,$scope.create=function(){var widget=new Widgets({name:this.name});widget.$save(function(response){$location.path("widgets/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.name=""},$scope.remove=function(widget){if(widget){widget.$remove();for(var i in $scope.widgets)$scope.widgets[i]===widget&&$scope.widgets.splice(i,1)}else $scope.widget.$remove(function(){$location.path("widgets")})},$scope.update=function(){var widget=$scope.widget;widget.$update(function(){$location.path("widgets/"+widget._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.widgets=Widgets.query()},$scope.findOne=function(){$scope.widget=Widgets.get({widgetId:$stateParams.widgetId})}}]);